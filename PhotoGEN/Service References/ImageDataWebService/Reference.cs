//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.225
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace PhotoGEN.ImageDataWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://example.com/sample.wsdl", ConfigurationName="ImageDataWebService.my_dispatcherPortType")]
    public interface my_dispatcherPortType {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://localhost:8008/Adder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdder(int a, int b, System.AsyncCallback callback, object asyncState);
        
        [return: System.ServiceModel.MessageParameterAttribute(Name="AddResult")]
        int EndAdder(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface my_dispatcherPortTypeChannel : PhotoGEN.ImageDataWebService.my_dispatcherPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class my_dispatcherPortTypeClient : System.ServiceModel.ClientBase<PhotoGEN.ImageDataWebService.my_dispatcherPortType>, PhotoGEN.ImageDataWebService.my_dispatcherPortType {
        
        private BeginOperationDelegate onBeginAdderDelegate;
        
        private EndOperationDelegate onEndAdderDelegate;
        
        private System.Threading.SendOrPostCallback onAdderCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public my_dispatcherPortTypeClient() {
        }
        
        public my_dispatcherPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public my_dispatcherPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public my_dispatcherPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public my_dispatcherPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AdderCompletedEventArgs> AdderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhotoGEN.ImageDataWebService.my_dispatcherPortType.BeginAdder(int a, int b, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdder(a, b, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int PhotoGEN.ImageDataWebService.my_dispatcherPortType.EndAdder(System.IAsyncResult result) {
            return base.Channel.EndAdder(result);
        }
        
        private System.IAsyncResult OnBeginAdder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int a = ((int)(inValues[0]));
            int b = ((int)(inValues[1]));
            return ((PhotoGEN.ImageDataWebService.my_dispatcherPortType)(this)).BeginAdder(a, b, callback, asyncState);
        }
        
        private object[] OnEndAdder(System.IAsyncResult result) {
            int retVal = ((PhotoGEN.ImageDataWebService.my_dispatcherPortType)(this)).EndAdder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdderCompleted(object state) {
            if ((this.AdderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdderCompleted(this, new AdderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdderAsync(int a, int b) {
            this.AdderAsync(a, b, null);
        }
        
        public void AdderAsync(int a, int b, object userState) {
            if ((this.onBeginAdderDelegate == null)) {
                this.onBeginAdderDelegate = new BeginOperationDelegate(this.OnBeginAdder);
            }
            if ((this.onEndAdderDelegate == null)) {
                this.onEndAdderDelegate = new EndOperationDelegate(this.OnEndAdder);
            }
            if ((this.onAdderCompletedDelegate == null)) {
                this.onAdderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdderCompleted);
            }
            base.InvokeAsync(this.onBeginAdderDelegate, new object[] {
                        a,
                        b}, this.onEndAdderDelegate, this.onAdderCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PhotoGEN.ImageDataWebService.my_dispatcherPortType CreateChannel() {
            return new my_dispatcherPortTypeClientChannel(this);
        }
        
        private class my_dispatcherPortTypeClientChannel : ChannelBase<PhotoGEN.ImageDataWebService.my_dispatcherPortType>, PhotoGEN.ImageDataWebService.my_dispatcherPortType {
            
            public my_dispatcherPortTypeClientChannel(System.ServiceModel.ClientBase<PhotoGEN.ImageDataWebService.my_dispatcherPortType> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAdder(int a, int b, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = a;
                _args[1] = b;
                System.IAsyncResult _result = base.BeginInvoke("Adder", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAdder(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Adder", _args, result)));
                return _result;
            }
        }
    }
}
